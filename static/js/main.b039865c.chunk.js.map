{"version":3,"sources":["public/strangerthings.jpg","public/stranger_things_logo.png","client/Fullscreen.js","client/Overlay.js","client/MainLayout.js","client/Chatroom.js","client/ChatroomPreview.js","client/Home.js","client/Loader.js","client/UserSelection.js","client/socket.js","client/Root.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styled","div","_templateObject","FullScreen","Overlay_templateObject","props","background","opacity","ContentWrapper","MainLayout_templateObject","Center","_templateObject2","Content","_templateObject3","Relative","_templateObject4","Sticky","_templateObject5","Logo","img","_templateObject6","strangerThingsLogo","AvatarWrapper","_templateObject7","BackgroundImage","_templateObject8","src","UserName","_templateObject9","MainLayout","react_default","a","createElement","Fullscreen","onClick","onUserSelectionClick","user","avatarProps","image","children","Face_default","className","Avatar_default","Object","assign","renderAvatar","concat","name","lastName","BGImage","Overlay","ChatWindow","Chatroom_templateObject","bgImage","ChatPanel","Chatroom_templateObject2","InputPanel","Chatroom_templateObject3","Scrollable","Chatroom_templateObject4","OutputText","Chatroom_templateObject5","EventText","Chatroom_templateObject6","OverlayRound","Chatroom_templateObject7","EventTextPadded","Chatroom_templateObject8","Header","Chatroom_templateObject9","Title","_templateObject10","isTypingTimeout","undefined","Chatroom","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLeave","clearTimeout","setIsNotTyping","onInputChange","e","onIsTyping","setState","input","target","value","chatroomName","isTyping","panel","React","createRef","chatHistory","state","typingUsers","someoneIsTypying","onSendMessage","bind","assertThisInitialized","updateChatHistory","onMessageReceived","onSomeoneIsTypingReceived","registerHandler","scrollToChatBottom","unregisterHandler","_this2","chatroom","console","log","setTimeout","_this3","err","error","messageEntry","length","current","scrollTo","scrollHeight","chatEvent","Fragment","index_es","alt","disableTypography","primary","event","secondary","message","showChatroomEvent","showMessageEvent","slice","typingUsersString","map","join","color","align","variant","_this4","alignItems","key","id","showEvent","_this5","Button_default","ref","showAllMessages","showIsTyping","Input_default","placeholder","onChange","onKeyPress","autoComplete","inputProps","aria-label","Fab_default","component","Send_default","Component","ChatroomWrapper","section","ChatroomPreview_templateObject","ChatroomPreview","onEnter","padding","Card_default","Typography_default","gutterBottom","Home","_ref","chatrooms","onEnterChatroom","client_ChatroomPreview","Loader_templateObject","Loader","Loader_Center","CircularProgress_default","ChooseAvatarDialog","isUserSelected","selectedUser","availableUsers","renderUserListItems","handleClose","handleUserSelection","getAvailableUsers","onClose","onSelection","ListItem_default","button","selected","ListItemAvatar_default","ListItemText_default","open","List_default","DialogActions_default","io","require","socket","serverLANURL","window","location","origin","port","connect","serverLocalURL","on","register","cb","emit","leave","msg","getChatRooms","off","Root","context","handleOnEnterChatroom","selectedChatroom","client","userSelectionOpen","registerUser","handleOnLeaveChatroom","handleSendMessage","handleUserSelectionClickOpen","handleRegister","onLeaveChatroom","getChatrooms","handleIsTyping","onNoUserSelected","onEnterChatroomSuccess","Error","lastChatroom","onLeaveSuccess","userToRegister","onRegisterResponse","callback","Chatroom_Chatroom","UserSelection","MuiThemeProvider_default","client_MainLayout","isUserAndChatroomSelected","showChatroom","showHome","showUserSelection","App","client_Root","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b039865c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/strangerthings.533a1ea7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/stranger_things_logo.74b7f8d7.png\";","import styled from 'styled-components'\n\nexport default styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n`\n","import FullScreen from './Fullscreen';\nimport styled from 'styled-components'\n\nexport default styled(FullScreen)`\n  background: ${props => props.background}; \n  opacity: ${props => props.opacity};\n`","import React from 'react';\nimport styled from 'styled-components';\nimport Fullscreen from './Fullscreen';\nimport Overlay from './Overlay';\n\nimport Grid from '@material-ui/core/Grid'\nimport Avatar from '@material-ui/core/Avatar';\nimport FaceIcon from '@material-ui/icons/Face';\n\nimport BGImage from '../public/strangerthings.jpg'\nimport strangerThingsLogo from '../public/stranger_things_logo.png'\n\nconst ContentWrapper = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  z-index: 1;\n`\nconst Center = styled.div`\n  position: relative;\n  max-width: 1000px;\n  margin: auto;\n  padding: 40px 0;\n  height: 100%;\n  box-sizing: border-box;\n`\nconst Content = styled.div`\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 0 20px;\n  height: 100%;\n`\nconst Relative = styled.div`\n  position: relative;\n`\n\nconst Sticky = styled.div`\n  position: fixed;\n  width: 20%;\n  left: 10%;\n`\n\nconst Logo = styled.img`\n  content: url(${strangerThingsLogo});\n  object-fit: cover;\n  width: 100%;\n`\n\nconst AvatarWrapper = styled.div`\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  a {\n    text-decoration: none;\n  }\n  img {\n    box-shadow: rgba(255, 255, 255, 0.2) 0 0 10px 2px;\n  }\n  .avatar {\n    height: 100px;\n    width: 100px;\n  }\n\n  .avatar-icon {\n    font-size: 100px;\n  }\n`\nconst BackgroundImage = styled.div`\n  background: url(${props => props.src}) no-repeat center center fixed;\n  background-size: cover;\n  height: 100%;\n  overflow: hidden;\n`\nconst UserName = styled.p`\n  font-size: 24px;\n  height: 27px;\n  text-align: center;\n  color: #fafafa;\n`\n\n\nfunction fullName(user) {\n  //console.log('trying to write fullname of user with image: ', user)\n  return user ? `${user.name} ${user.lastName}` : 'Who are you?'\n}\n\nfunction renderAvatar(user) {\n  const avatarProps = user\n    ? {src: user.image }\n    : {children: (<FaceIcon className='avatar-icon' />)}\n  return <Avatar className='avatar' {...avatarProps}/>\n}\n\n\nfunction MainLayout(props) {\n\n  /*\n  function handleGetAvailableUsers(callback) {\n    console.log('temp handling of get avaialble users')\n    callback(null, users);\n  }\n  */\n\n  return (\n    <Fullscreen>\n      <ContentWrapper>\n        <Center>\n          <Content>\n            <Relative>\n              <Sticky>\n                <Logo />\n                <AvatarWrapper onClick={props.onUserSelectionClick} >\n                  {renderAvatar(props.user)}\n                  <UserName> { fullName(props.user) } </UserName>\n                </AvatarWrapper>\n              </Sticky>\n            </Relative>\n            { props.children }\n          </Content>\n        </Center>\n      </ContentWrapper>\n\n      <Fullscreen>\n        <BackgroundImage src={BGImage}></BackgroundImage>\n        <Overlay opacity=\"0.7\" background='#0f0f0f'>\n        </Overlay>\n      </Fullscreen>\n\n    </Fullscreen>\n  );\n}\n\nexport default MainLayout;\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport { List, ListItem, ListItemAvatar, ListItemText, Typography} from '@material-ui/core';\n\nimport Overlay from './Overlay'\n\nconst borderRadius = '20px'\n\nconst ChatWindow = styled.div`\n    background-color: rgb(255, 255, 255, 0.1);\n    background-image: url(${props => props.bgImage});\n    border-radius: ${borderRadius};\n    background-size: cover;\n    background-position: center;\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    height: 100%;\n    width: 520px;\n    box-sizing: border-box;\n`\n\nconst ChatPanel = styled.div`\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    height: 100%;\n    width: 100%;\n    box-sizing: border-box;\n    z-index: 1;\n`\n\nconst InputPanel = styled.div`\n    display: flex;\n    align-items: center;\n    align-self: center;\n    padding: 20px;\n    border-top: 1px solid #fafafa;\n\n    .message-input {\n        color: white;\n    }\n`\n\nconst Scrollable = styled.div`\n    height: 100%;\n    overflow: auto;\n`\nconst OutputText = styled.div`\n    box-sizing: border-box;\n    white-space: normal !important;\n    word-break: break-all !important;\n    overflow: initial !important;\n    width: 100%;\n    height: auto !important;\n    color: #fafafa !important;\n    /*margin-top: 5px;*/\n`\n\nconst EventText = styled(OutputText)`\n    /*margin-top: 0px;*/\n    color: silver !important;\n    font-size: 12px;\n`\n\nconst OverlayRound = styled(Overlay)`\n    border-radius: ${borderRadius};\n`\n\nconst EventTextPadded = styled(EventText)`\n    padding-left: 58px;\n`\n\nconst Header = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin: 0 20px;\n    z-index: 1;\n    color: #fafafa !important;\n    border-bottom: 1px solid;\n`\n\nconst Title = styled.p`\n    text-align: center;\n    font-size: 24px;\n`\n\nvar isTypingTimeout = undefined;\n\nexport default class Chatroom extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.panel = React.createRef();\n\n        const { chatHistory } = props;\n\n        this.state = {\n            input: '',\n            chatHistory,\n            typingUsers: [],\n            someoneIsTypying: false,\n            isTyping: false,\n        }\n\n        this.onSendMessage = this.onSendMessage.bind(this);\n        this.updateChatHistory = this.updateChatHistory.bind(this);\n        this.onMessageReceived = this.onMessageReceived.bind(this);\n        this.onSomeoneIsTypingReceived = this.onSomeoneIsTypingReceived.bind(this);\n        this.onIsTyping = this.onIsTyping.bind(this);\n    }\n\n    componentDidMount(){\n        //Handle register - add user, show log in message and so on\n        this.props.registerHandler(this.onMessageReceived, this.onSomeoneIsTypingReceived)\n        this.scrollToChatBottom();\n    }\n    componentDidUpdate(){\n        this.scrollToChatBottom();\n    }\n    componentWillUnmount(){\n        //Handle unregister\n        this.props.unregisterHandler()\n    }\n\n    onLeave = () => {\n        clearTimeout(isTypingTimeout);\n        this.setIsNotTyping()\n        this.props.onLeave()\n    }\n\n    onInputChange = (e) => {\n        this.onIsTyping()\n        this.setState({\n            input: e.target.value,\n        });\n    }\n\n    setIsNotTyping = (chatroomName) => {\n        this.setState({isTyping: false})\n        this.props.onIsTyping(chatroomName, false)\n    }\n\n    onIsTyping() {\n        const {onIsTyping} = this.props;\n        const interval = 1000;\n        const chatroomName = this.props.chatroom.name\n\n        if(!this.state.isTyping){\n            this.setState({isTyping: true})\n            isTypingTimeout = setTimeout(() => this.setIsNotTyping(chatroomName), interval)\n            onIsTyping(chatroomName, true)\n        }\n        else {\n            //reset the timeout of typing\n            console.log('type bounce')\n            clearTimeout(isTypingTimeout)\n            isTypingTimeout = setTimeout(() => this.setIsNotTyping(chatroomName), interval)\n        }\n    }\n\n    onSendMessage() {\n        console.log('message to send is:', this.state.input)\n\n        if (!this.state.input)\n            return\n        const serverGotMessageCallback = (err) => {\n            if (err)\n                return console.error(err);\n            return this.setState({\n                input: ''\n            })\n        }\n        this.props.onSendMessage(this.state.input, serverGotMessageCallback)\n    }\n\n    onMessageReceived(messageEntry) {\n        console.log('onMessagedReceived: ', messageEntry);\n        this.updateChatHistory(messageEntry);\n    }\n\n    onSomeoneIsTypingReceived(typingUsers) {\n        //const message = 'received from server that ' + (!isTyping ? 'no one' : 'someone') + ' is typing'\n        console.log('theese many typing: ', typingUsers.length)\n        this.setState({\n            typingUsers\n        })\n    }\n\n    updateChatHistory(messageEntry) {\n        this.setState({\n            chatHistory: this.state.chatHistory.concat(messageEntry)\n        });\n    }\n\n    scrollToChatBottom() {\n        this.panel.current.scrollTo(0, this.panel.current.scrollHeight)\n    }\n\n    showMessageEvent(chatEvent){\n        return (\n            <React.Fragment>\n                <ListItemAvatar>\n                    <Avatar alt=\"Username image\" src={chatEvent.user.image} />\n                </ListItemAvatar>\n                <ListItemText\n                    disableTypography\n                    primary={<EventText>{chatEvent.user.name} {chatEvent.event}</EventText>}\n                    secondary={<OutputText>{chatEvent.message}</OutputText>}\n                />\n            </React.Fragment>\n        )\n    }\n\n    showChatroomEvent(chatEvent){\n        return (\n            <ListItemText\n                disableTypography\n                secondary={<EventTextPadded>{chatEvent.user.name} {chatEvent.event}</EventTextPadded>}\n            />\n        )\n    }\n\n    showEvent(chatEvent){\n        return chatEvent.event ? this.showChatroomEvent(chatEvent) : this.showMessageEvent(chatEvent)\n    }\n\n    showIsTyping() {\n        let typingUsers = this.state.typingUsers.slice();\n        if(typingUsers.length > 0){\n            let typingUsersString = typingUsers.length < 4\n                ? this.state.typingUsers.map(user => user.name).join(\", \")\n                : 'more than three'\n            return (\n                <Typography color='secondary' align='center' variant='overline' >\n                    {typingUsersString} is typing...\n                </Typography>\n            );\n        }\n        else\n            return \n    }\n\n    showAllMessages(chatHistory){\n        //FUTURE - could add conditional rendering of different types of messages. Normal message, login message, log out...\n        return(\n            <List>\n                {chatHistory.map(chatEvent => (\n                    <ListItem alignItems=\"flex-start\" key={chatEvent.id} >\n                        {this.showEvent(chatEvent)}\n                    </ListItem>\n                ))}\n            </List>\n        );\n    }\n\n    render() {\n        return(\n                <ChatWindow bgImage={this.props.chatroom.image}>\n                    <Header>\n                        <Title>\n                            {this.props.chatroom.name}\n                        </Title>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={this.onLeave} >\n                            Close\n                        </Button>\n                    </Header>\n                    <ChatPanel>\n                        <Scrollable ref={this.panel}>\n                            {this.showAllMessages(this.state.chatHistory)}\n                        </Scrollable>\n                        {this.showIsTyping()}\n                        <InputPanel>\n                        <Input\n                            className='message-input'\n                            color='secondary'\n                            id=\"message-input\"\n                            placeholder=\"Enter a message...\"\n                            onChange={this.onInputChange}\n                            value={this.state.input}\n                            onKeyPress={e => (e.key === 'Enter' ? this.onSendMessage() : null)}\n                            autoComplete='off'\n                            inputProps={{\n                            'aria-label': 'Description',\n                            }}\n                        />\n                        <Fab component=\"button\" variant=\"extended\" aria-label=\"Delete\" onClick={this.onSendMessage}>\n                            <SendIcon />\n                            Send\n                        </Fab>\n                        </InputPanel>\n                    </ChatPanel>\n                    <OverlayRound opacity='0.5' background='black'/>\n                </ChatWindow>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nimport Card from '@material-ui/core/Card';\nimport { CardMedia, CardContent, CardActionArea } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nconst ChatroomWrapper = styled.section`\n    float: right;\n    background-color: #123EDF;\n    width: 70%;\n    min-width: 250px;\n    margin-bottom: 20px;\n`\n\nfunction ChatroomPreview(props) {\n    const {chatroom, onEnter} = props;\n\n    return (\n        <ChatroomWrapper padding>\n            <Card onClick={(e) => onEnter(chatroom, e)}>\n                <CardActionArea>\n                    <CardMedia\n                        component=\"img\"\n                        image={chatroom.image}\n                        />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {chatroom.name}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </ChatroomWrapper>\n    )\n}\n\nexport default ChatroomPreview;","import React from 'react';\n\nimport ChatroomPreview from './ChatroomPreview';\n\nexport default ({\n    chatrooms,\n    onEnterChatroom\n}) => (\n    <div>\n        {\n            chatrooms.map(chatroom => (\n                <ChatroomPreview \n                    key={chatroom.name}\n                    chatroom={chatroom}\n                    onEnter={onEnterChatroom}\n                />\n            ))\n        }\n    </div>\n)","import React from 'react';\nimport styled from 'styled-components'\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Center = styled.div`\n    margin: auto;\n`\n\n\nexport default function Loader(props){\n        return(\n            <Center>\n                <CircularProgress color=\"secondary\" />\n            </Center>\n        );\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Dialog, DialogTitle, Avatar, DialogContent} from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Loader from './Loader';\n\nclass ChooseAvatarDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            availableUsers: null,\n        }\n\n        this.renderUserListItems = this.renderUserListItems.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleUserSelection = this.handleUserSelection.bind(this);\n        this.isUserSelected = this.isUserSelected.bind(this);\n    }\n\n    componentDidMount() {\n        const setAvailableUserCallback = (err, availableUsers) => {\n            console.log('client got the availableUsers: ', availableUsers)\n            this.setState({availableUsers})\n        }\n        this.props.getAvailableUsers(setAvailableUserCallback)\n    }\n\n    //DEPRICATED \n    isUserSelected = (user) => {\n        if(!user || !this.props.selectedUser)\n            return false\n        if(user.name === this.props.selectedUser.name) return true;\n        else return false\n    }\n\n    handleClose() {\n        this.props.onClose()\n    }\n\n    handleUserSelection(user) {\n        this.props.onSelection(user)\n    }\n\n    renderUserListItems() {\n        return this.state.availableUsers.map((user) => (\n            <ListItem button selected={this.isUserSelected(user)} onClick={() => this.handleUserSelection(user)} key={user.name}>\n                <ListItemAvatar>\n                    <Avatar src={user.image}/>\n                </ListItemAvatar>\n                <ListItemText primary={user.name + ' ' + user.lastName}/>\n            </ListItem>\n        ))\n    }\n\n    render() {\n        return (\n            <Dialog onClose={this.handleClose} open={this.props.open}>\n                <DialogTitle>Choose User</DialogTitle>\n                <DialogContent>\n                    {!(this.state.availableUsers)\n                        ?   <Loader /> \n                        :   <List>\n                                {this.renderUserListItems()}\n                            </List>\n                    }\n                </DialogContent>\n                <DialogActions onClick={this.handleClose}>\n                    <Button>Close</Button>\n                </DialogActions>\n            </Dialog>\n        );    \n    }\n}\n\nexport default ChooseAvatarDialog;","const io = require('socket.io-client')\nexport default function() {\n    const serverLANURL = window.location.origin.slice(0, - window.location.port.length)\n    const serverLocalURL = 'http://localhost:'\n    const port = 3001;\n    const socket = io.connect(serverLocalURL+port)\n    console.log(serverLANURL)\n\n    function registerHandler(onMessageReceived, onSomeoneIsTypingReceived) {\n        console.log('adding chatroomslisteners from server')\n        socket.on('message', onMessageReceived)\n        socket.on('someoneIsTyping', onSomeoneIsTypingReceived)\n    }\n\n    function unregisterHandler() {\n        socket.off('message')\n        socket.off('someoneIsTyping')\n    }\n\n    socket.on('error', (err) => {\n        console.log('received socket error:', err);\n    })\n\n    function register(name, cb) {\n        socket.emit('register', name, cb)\n    }\n\n    function join(chatroomName, cb) {\n        socket.emit('join', chatroomName, cb)\n    }\n\n    function leave(chatroomName, cb) {\n        socket.emit('leave', chatroomName, cb)\n    }\n\n    function message(chatroomName, msg, cb){\n        socket.emit('message', {chatroomName, message: msg}, cb)\n    }\n\n    function isTyping(chatroomName, isTyping, cb){\n        console.log(`sending is typing to server: ${isTyping} from ${chatroomName}`)\n        socket.emit('isTyping', {chatroomName, isTyping}, cb)\n    }\n\n    function getChatRooms(cb) {\n        console.log('getting chatrooms')\n        socket.emit('chatrooms', null, cb)\n    }\n\n    function getAvailableUsers(cb) {\n        socket.emit('availableUsers', null, cb)\n    }\n\n    return {\n        register,\n        join,\n        leave,\n        message,\n        isTyping,\n        getChatRooms,\n        getAvailableUsers,\n        registerHandler,\n        unregisterHandler,\n    }\n}\n","import React from 'react';\n\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\n\nimport MainLayout from './MainLayout';\nimport Chatroom from './Chatroom';\nimport Home from './Home';\nimport Loader from './Loader';\nimport UserSelection from './UserSelection';\n\nimport socket from './socket';\n\nclass Root extends React.Component {\n    constructor(props, context){\n        super(props);\n\n        this.state = {\n            client: socket(),\n            user: null,\n            chatrooms: null,\n            selectedChatroom: null,\n            userSelectionOpen: false,\n        }        \n\n        this.registerUser = this.registerUser.bind(this);\n        this.handleOnLeaveChatroom = this.handleOnLeaveChatroom.bind(this);\n        this.handleSendMessage = this.handleSendMessage.bind(this);\n        this.handleUserSelectionClickOpen = this.handleUserSelectionClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleRegister = this.handleRegister.bind(this);\n        this.onEnterChatroom = this.onEnterChatroom.bind(this);\n        this.onLeaveChatroom = this.onLeaveChatroom.bind(this);\n        this.getChatrooms = this.getChatrooms.bind(this);\n        this.handleIsTyping = this.handleIsTyping.bind(this);\n    }\n\n    componentDidMount() {\n        console.log('comp did mount')\n        this.getChatrooms()\n    }\n\n    getChatrooms() {\n        const getChatroomsCallback = (err, chatrooms) => {\n            console.log('got chatrooms from server: ', chatrooms)\n            this.setState({chatrooms})\n        }\n        this.state.client.getChatRooms(getChatroomsCallback)\n    }\n\n    handleUserSelectionClickOpen(){\n        if(this.state.selectedChatroom)\n            return\n        this.setState({\n            userSelectionOpen: true\n        }, () => console.log('handledClick. UserSel is open: ', this.state.userSelectionOpen))\n    }\n  \n    handleClose() {\n        this.setState({userSelectionOpen : false})\n    }\n    \n    handleOnEnterChatroom = (chatroom) => {\n        const onNoUserSelected = () => {\n            console.log('no user is selected', this.state.user)\n            this.setState({selectedChatroom: null})\n        }\n        const onEnterChatroomSuccess = (chatHistory) => {\n            //TODO - push to history with router. Now pretty useless i guess since Chatroom should take care of actual chatHistory and displaying it\n            console.log('Entered Correctly and will show chatHistory: ', chatHistory)\n            this.setState({\n                chatHistory,\n                selectedChatroom: chatroom\n            })\n        }\n\n        this.onEnterChatroom(chatroom.name, onNoUserSelected, onEnterChatroomSuccess)\n    }\n\n    onEnterChatroom(chatroomName, onNoUserSelected, onEnterChatroomSuccess) {\n        if(!this.state.user)\n            return onNoUserSelected()\n        const onEnterChatroomSuccessCallback = (err, chatHistory) => {\n            if (err)\n                return Error(err)\n            return onEnterChatroomSuccess(chatHistory)\n        }\n        \n        return this.state.client.join(chatroomName, onEnterChatroomSuccessCallback)\n    }\n\n\n    handleOnLeaveChatroom() {\n        //TODO - properly with react router\n        const onLeaveSuccess = () => {\n            const lastChatroom = this.state.selectedChatroom;\n            this.setState({\n                selectedChatroom : null\n            })\n            console.log('Left chatroom: ', lastChatroom);\n        }\n        this.onLeaveChatroom(this.state.selectedChatroom, onLeaveSuccess)        \n    }\n\n    onLeaveChatroom(chatroom, onLeaveSuccess) {\n        //TODO - fix error handling to make it DRY\n        const onLeaveCallback = (err) => {\n            if(err)\n                return Error('Could not leave chatroom', err)\n            return onLeaveSuccess()\n        }\n        this.state.client.leave(chatroom.name, onLeaveCallback)\n    }\n\n    handleRegister(user) {\n        console.log('Client is handling user Register')\n        this.registerUser(user);\n    }\n\n    registerUser(userToRegister) {\n        //TODO - connect to server. Also look if we should replace isRegisterInProcess with userSelectionOpen\n        //callback after user has been registred\n        const onRegisterResponse = (user) => this.setState({userSelectionOpen : false, user})\n        const onRegisterCallback = (err, user) => {\n            //handle errors otherwise return user. Or, you could also most likely assume user is null or user and do one onRegisterResponse call\n            //TODO - remove return statements\n            if (err) {\n                console.error('got error from server when registering: ', err)\n                return onRegisterResponse(null)\n            }\n            else return onRegisterResponse(user)\n        }\n\n        console.log('calling client to server to handle Register')\n        this.setState({userSelectionOpen : true})\n        this.state.client.register(userToRegister.name, onRegisterCallback)\n    }\n\n    handleSendMessage(message, callback) {\n        console.log(`locally handling message ${message} in chatroom ${this.state.selectedChatroom.name}`)\n        this.state.client.message(\n            this.state.selectedChatroom.name,\n            message,\n            callback\n        );\n    }\n\n    handleIsTyping(chatroomName, isTyping){\n        const isTypingCallback = (err) => {\n            if(err) {\n                console.error('got this error from server when sending user is typing: ', err)\n            }\n        }\n        this.state.client.isTyping(this.state.selectedChatroom.name, isTyping, isTypingCallback)\n    }\n\n    isUserAndChatroomSelected() {\n        if(this.state.selectedChatroom && this.state.user) \n            return true;\n        else\n            return false;\n    }\n\n    showChatroom() {\n        return (\n            <Chatroom\n                chatroom={this.state.selectedChatroom}\n                user={this.state.user}\n                chatHistory={this.state.chatHistory}\n                registerHandler={this.state.client.registerHandler}\n                unregisterHandler={this.state.client.unregisterHandler}\n                onSendMessage={this.handleSendMessage}\n                onIsTyping={this.handleIsTyping}\n                onLeave={this.handleOnLeaveChatroom}\n            />\n        )\n    }\n\n    showHome() {\n        return (\n            <React.Fragment>\n                {!this.state.chatrooms\n                    ? <Loader />\n                    : (\n                        <Home\n                            chatrooms={this.state.chatrooms}\n                            onEnterChatroom={this.handleOnEnterChatroom}\n                        />\n                    )\n                }\n            </React.Fragment>\n        )\n    }\n\n    showUserSelection() {\n        //Users are loading in background since we render but use open state to shof/hide it\n        return (\n            <React.Fragment>\n                {!this.state.userSelectionOpen\n                    ? <React.Fragment />\n                    : (\n                        <UserSelection\n                            onClose={this.handleClose}\n                            onSelection={this.handleRegister}\n                            open\n                            selectedUser={this.state.user}\n                            getAvailableUsers={this.state.client.getAvailableUsers}\n                        />\n                    )\n                }\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <MuiThemeProvider>\n                <MainLayout user={this.state.user} onUserSelectionClick={this.handleUserSelectionClickOpen}>\n                    {this.isUserAndChatroomSelected() ? this.showChatroom() : this.showHome() }\n                    {this.showUserSelection()}\n                </MainLayout>\n            </MuiThemeProvider>\n        )\n    }\n    \n}\n\nexport default Root;","import React from 'react';\nimport './App.css';\n\nimport Root from './client/Root';\n\nfunction App() {\n  return (\n    <Root></Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}